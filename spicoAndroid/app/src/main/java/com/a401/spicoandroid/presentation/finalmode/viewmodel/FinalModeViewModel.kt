package com.a401.spicoandroid.presentation.finalmode.viewmodel

import android.Manifest
import android.util.Log
import androidx.annotation.RequiresPermission
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.*
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.a401.spicoandroid.common.domain.DataResource
import com.a401.spicoandroid.data.finalmode.dto.FinalModeResultRequestDto
import com.a401.spicoandroid.domain.finalmode.model.AssessmentResult
import com.a401.spicoandroid.domain.finalmode.model.FinalAnswer
import com.a401.spicoandroid.domain.finalmode.usecase.FinishFinalPracticeUseCase
import com.a401.spicoandroid.domain.finalmode.usecase.GenerateFinalQuestionsUseCase
import com.a401.spicoandroid.domain.practice.usecase.DeletePracticeUseCase
import com.a401.spicoandroid.domain.project.usecase.GetProjectDetailUseCase
import com.a401.spicoandroid.infrastructure.audio.AudioAnalyzer
import com.a401.spicoandroid.infrastructure.camera.UploadManager
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import java.io.File

@HiltViewModel
class FinalModeViewModel @Inject constructor(
    private val generateFinalQuestionsUseCase: GenerateFinalQuestionsUseCase,
    private val finishFinalPracticeUseCase: FinishFinalPracticeUseCase,
    private val uploadManager: UploadManager,
    private val deletePracticeUseCase: DeletePracticeUseCase,
    private val getProjectDetailUseCase: GetProjectDetailUseCase,

    ) : ViewModel() {

    private var practiceId: Int? = null

    fun setPracticeId(id: Int) {
        practiceId = id
    }


    // 1. Ïò§ÎîîÏò§ Í¥ÄÎ†®
    private val audioAnalyzer = AudioAnalyzer()

    private val _waveform = MutableStateFlow<List<Float>>(emptyList())
    val waveform: StateFlow<List<Float>> = _waveform

    @RequiresPermission(Manifest.permission.RECORD_AUDIO)
    fun startAudio() {
        Log.d("AudioDebug", "üéôÔ∏è startAudio Ìò∏Ï∂úÎê®")
        audioAnalyzer.start(viewModelScope) { data ->
            Log.d("AudioDebug", "üìà waveform Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${data.size}")
            _waveform.value = data
        }
    }


    fun stopAudio() {
        audioAnalyzer.stop()
    }

    // 2. ÌÉÄÏù¥Î®∏ Í¥ÄÎ†®
    private var answerTimeLimit: Int = 10

    fun setAnswerTimeLimit(value: Int) {
        Log.d("TimerDebug", "üõ†Ô∏è answerTimeLimit ÏÑ§Ï†ïÎê®: $value")
        answerTimeLimit = value
    }

    var isFirstQuestionStarted by mutableStateOf(false)
        private set

    fun markFirstQuestionStarted() {
        isFirstQuestionStarted = true
    }

    private var perQuestionTimerJob: Job? = null

    private fun startPerQuestionTimer() {
        Log.d("TimerDebug", "‚è≥ perQuestionTimer ÏãúÏûë: $answerTimeLimit Ï¥à ÎåÄÍ∏∞")
        perQuestionTimerJob?.cancel()
        perQuestionTimerJob = viewModelScope.launch {
            Log.d("TimerDebug", "‚è≥ perQuestionTimer ÏãúÏûë: $answerTimeLimit Ï¥à ÎåÄÍ∏∞")
            delay(answerTimeLimit * 1000L)
            val nextIndex = _currentQuestionIndex.value + 1
            Log.d("TimerDebug", "‚è≠Ô∏è ÌÉÄÏù¥Î®∏ ÏôÑÎ£å ‚Üí nextIndex=$nextIndex, ÏßàÎ¨∏ Í∞úÏàò=${_finalQuestionState.value.questions.size}")
            if (nextIndex < _finalQuestionState.value.questions.size) {
                _currentQuestionIndex.value = nextIndex
            } else {
                Log.d("TimerDebug", "‚úÖ Î™®Îì† ÏßàÎ¨∏ ÏôÑÎ£å ‚Üí isAnswerCompleted=true")
                _isAnswerCompleted.value = true
            }
        }
    }


    fun onQuestionStarted() {
        Log.d("TimerDebug", "‚úÖ onQuestionStarted() Ìò∏Ï∂úÎê® - ÌÉÄÏù¥Î®∏ Ï¥àÍ∏∞Ìôî ÏãúÏûë")
        Log.d("TimerDebug", "üí¨ ÌòÑÏû¨ answerTimeLimit: $answerTimeLimit")
        elapsedTime = "00:00"
        recordingStartMillis = System.currentTimeMillis()
        startTimer()
        startPerQuestionTimer()
    }

    var countdown by mutableStateOf(3)
        private set

    var elapsedTime by mutableStateOf("00:00")
        private set

    private var recordingStartMillis: Long = 0L
    private var timerJob: Job? = null

    var isRecording by mutableStateOf(false)
        private set

    fun startCountdownAndRecording(onStartRecording: () -> Unit) {
        Log.d("AudioDebug", "‚è±Ô∏è startCountdownAndRecording Ìò∏Ï∂úÎê®")
        viewModelScope.launch {
            for (i in 3 downTo 1) {
                countdown = i
                Log.d("AudioDebug", "‚è±Ô∏è countdown: $i")
                delay(1000)
            }
            countdown = 0
            Log.d("AudioDebug", "üü° countdown: 0")
            delay(1000)
            countdown = -1
            isRecording = true
            Log.d("AudioDebug", "‚úÖ Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ Ï¢ÖÎ£å ‚Üí onStartRecording Ìò∏Ï∂ú")
            onStartRecording()
            Log.d("AudioDebug", "‚ñ∂Ô∏è onStartRecording Ïã§ÌñâÎê®")
            startTimer()
        }
    }


    fun startTimer() {
        Log.d("TimerDebug", "‚ñ∂Ô∏è startTimer() ÏãúÏûëÎê®")
        recordingStartMillis = System.currentTimeMillis()
        timerJob = viewModelScope.launch {
            while (isRecording) {
                val elapsedSec = ((System.currentTimeMillis() - recordingStartMillis) / 1000).toInt()
                val minutes = elapsedSec / 60
                val seconds = elapsedSec % 60
                elapsedTime = "%02d:%02d".format(minutes, seconds)
                Log.d("TimerDebug", "üïí elapsedTime: $elapsedTime")
                delay(1000)
            }
        }
    }

    fun stopRecording() {
        isRecording = false
        timerJob?.cancel()
    }

    // 3. Îã§Ïù¥ÏñºÎ°úÍ∑∏
    var showStopConfirm by mutableStateOf(false)
        private set

    var showEarlyExitDialog by mutableStateOf(false)
        private set

    var showNormalExitDialog by mutableStateOf(false)
        private set

    fun showConfirmDialog() {
        showStopConfirm = true
    }

    fun hideConfirmDialog() {
        showStopConfirm = false
    }

    fun checkElapsedAndShowDialog(elapsedSeconds: Int) {
        if (elapsedSeconds < 30) {
            showEarlyExitDialog = true
        } else {
            showNormalExitDialog = true
        }
    }

    fun hideAllDialogs() {
        showEarlyExitDialog = false
        showNormalExitDialog = false
    }

    // 4. ÏßàÎ¨∏ ÏÉùÏÑ± ÏÉÅÌÉú Í¥ÄÎ¶¨
    private val _finalQuestionState = MutableStateFlow(FinalQuestionState())
    val finalQuestionState: StateFlow<FinalQuestionState> = _finalQuestionState.asStateFlow()

    private val _currentQuestionIndex = MutableStateFlow(0)
    val currentQuestionIndex: StateFlow<Int> = _currentQuestionIndex.asStateFlow()

    private var questionTimerJob: Job? = null

    private fun startAutoQuestionCycle() {
        questionTimerJob?.cancel() // Ïù¥Ï†Ñ ÌÉÄÏù¥Î®∏ Ï∑®ÏÜå
        questionTimerJob = viewModelScope.launch {
            while (true) {
                _finalQuestionState.update { state ->
                    val nextIndex = _currentQuestionIndex.value + 1
                    if (nextIndex < state.questions.size) {
                        _currentQuestionIndex.value = nextIndex
                    } else {
                        cancel() // ÎßàÏßÄÎßâ ÏßàÎ¨∏Ïù¥Î©¥ ÌÉÄÏù¥Î®∏ Ï¢ÖÎ£å
                    }
                    state
                }
            }
        }
    }
    // Ïó∞Ïäµ ÏÇ≠Ï†ú
    fun deletePracticeAndExit(
        projectId: Int,
        practiceId: Int,
        onSuccess: () -> Unit,
        onError: () -> Unit
    ) {
        Log.d("FinalFlow", "üì§ Ïó∞Ïäµ ÏÇ≠Ï†ú ÏöîÏ≤≠ Ï†ÑÏÜ°: projectId=$projectId, practiceId=$practiceId")
        viewModelScope.launch {
            when (val result = deletePracticeUseCase(projectId, practiceId)) {
                is DataResource.Success -> {
                    Log.d("FinalFlow", "‚úÖ Ïó∞Ïäµ ÏÇ≠Ï†ú ÏÑ±Í≥µ")
                    onSuccess()
                }
                is DataResource.Error -> {
                    Log.e("FinalFlow", "‚ùå Ïó∞Ïäµ ÏÇ≠Ï†ú Ïã§Ìå®", result.throwable)
                    onError()
                }
                else -> {
                    Log.w("FinalFlow", "‚ö†Ô∏è Ïó∞Ïäµ ÏÇ≠Ï†ú ÏùëÎãµ ÏóÜÏùå")
                }
            }
        }
    }

    fun generateFinalQuestions(projectId: Int, practiceId: Int, speechContent: String) {
        viewModelScope.launch {
            _finalQuestionState.update { it.copy(isLoading = true, error = null) }

            when (val result = generateFinalQuestionsUseCase(projectId, practiceId, speechContent)) {
                is DataResource.Success -> {
                    Log.d("FinalFlow", "‚úÖ ÏßàÎ¨∏ ÏÉùÏÑ± ÏÑ±Í≥µ: ${result.data}")
                    _finalQuestionState.update {
                        it.copy(questions = result.data, isLoading = false)
                    }
                    _currentQuestionIndex.value = 0
                }
                is DataResource.Error -> {
                    Log.e("FinalFlow", "‚ùå ÏßàÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®: ${result.throwable}")
                    _finalQuestionState.update {
                        it.copy(error = result.throwable, isLoading = false)
                    }
                }
                is DataResource.Loading -> {
                    _finalQuestionState.update { it.copy(isLoading = true) }
                }
            }
        }
    }

    private var answerCount = 0
    private val _isAnswerCompleted = MutableStateFlow(false)
    val isAnswerCompleted: StateFlow<Boolean> get() = _isAnswerCompleted

    fun updateAnswer(questionId: Int, answer: String) {
        val newAnswers = finalQuestionState.value.answers
            .filterNot { it.questionId == questionId } + FinalAnswer(questionId, answer)

        _finalQuestionState.value = finalQuestionState.value.copy(answers = newAnswers)
        answerCount += 1
        if (answerCount == finalQuestionState.value.questions.size) {
            _isAnswerCompleted.value = true
        }
    }

    private val _finalResultState = MutableStateFlow(FinalModeResultState())
    val finalResultState: StateFlow<FinalModeResultState> = _finalResultState.asStateFlow()

    private val _assessmentResult = MutableStateFlow<AssessmentResult?>(null)
    val assessmentResult: StateFlow<AssessmentResult?> = _assessmentResult

    fun setAssessmentResult(result: AssessmentResult) {
        _assessmentResult.value = result
    }

    fun submitFinalModeResult(
        projectId: Int,
        request: FinalModeResultRequestDto
    ) {
        val id = practiceId ?: run {
            Log.e("FinalFlow", "‚ùå practiceIdÍ∞Ä nullÏûÖÎãàÎã§.")
            return
        }

        Log.d("FinalFlow", "üì§ Í≤∞Í≥º Ï†ÄÏû• ÏöîÏ≤≠: projectId=$projectId, practiceId=$id")

        viewModelScope.launch {
            _finalResultState.update { it.copy(isLoading = true, error = null) }

            when (val result = finishFinalPracticeUseCase(projectId, id, request)) {
                is DataResource.Success -> {
                    Log.d("FinalFlow", "‚úÖ Ï†ÄÏû• ÏÑ±Í≥µ: presignedUrl=${result.data.presignedUrl}")
                    _finalResultState.update {
                        it.copy(presignedUrl = result.data.presignedUrl, isLoading = false)
                    }
                }
                is DataResource.Error -> {
                    Log.e("FinalFlow", "‚ùå Ï†ÄÏû• Ïã§Ìå®: ${result.throwable}")
                    _finalResultState.update {
                        it.copy(error = result.throwable, isLoading = false)
                    }
                }
                is DataResource.Loading -> {
                    Log.d("FinalFlow", "‚è≥ Ï†ÄÏû• Ï§ë")
                    _finalResultState.update { it.copy(isLoading = true) }
                }
            }
        }
    }


    fun uploadFinalVideo(presignedUrl: String, file: File, onResult: (Boolean) -> Unit) {
        viewModelScope.launch {
            val result = uploadManager.uploadVideoToPresignedUrl(presignedUrl, file)
            onResult(result)
        }
    }

    private var hasQnA: Boolean = false
    fun setHasQnA(value: Boolean) {
        Log.d("FinalFlow", "üì• setHasQnA called with: $value")
        hasQnA = value
    }

    fun getHasQnA(): Boolean {
        Log.d("FinalFlow", "üì§ getHasQnA returns: $hasQnA")
        return hasQnA
    }

    // ÎåÄÎ≥∏
    private val _scriptState = MutableStateFlow(FinalModeScriptState())
    val scriptState: StateFlow<FinalModeScriptState> = _scriptState.asStateFlow()

    fun setScriptLoading() {
        _scriptState.value = FinalModeScriptState(isLoading = true)
    }

    fun setScript(script: String?) {
        _scriptState.value = FinalModeScriptState(script = script)
        Log.d("FinalFlow", "üìù ÎåÄÎ≥∏ Ï†ÄÏû•Îê® ‚Üí $script")
    }

    fun setScriptError(e: Throwable) {
        _scriptState.value = FinalModeScriptState(error = e)
        Log.e("FinalFlow", "‚ùå ÎåÄÎ≥∏ Î°úÎî© Ïã§Ìå®", e)
    }

    fun loadProjectScript(projectId: Int) {
        viewModelScope.launch {
            setScriptLoading()
            when (val result = getProjectDetailUseCase(projectId)) {
                is DataResource.Success -> setScript(result.data.script)
                is DataResource.Error -> setScriptError(result.throwable)
                is DataResource.Loading -> {
                    Log.d("FinalFlow", "‚è≥ ÌååÏù¥ÎÑê Î™®ÎìúÏóêÏÑú ÎåÄÎ≥∏ Î∂àÎü¨Ïò§Îäî Ï§ë")
                }
            }
        }
    }
}

